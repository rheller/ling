== README

LING

Language Flashcards to reinforce language learning.

Ling will present you with words from your selected language at random, and offer you three choices, one containing the correct translation, along with two incorrect translations. 

Once you select one of the words, Ling will let you know if you selected the corrent translation, or will inform you of the correct translation if you make an incorrect choice.

Ling records the words you've already been exposed to. In addition to presenting new words selected at random, Ling will retest you on words you've seen before--particularly if you've translated them incorrectly in the past. 

To install:

Grab the code:

git clone https://github.com/rheller/ling

Switch to the newly created directory:

cd ling

Create the database:

bundle exec rake db:migrate

Seed the database with some basic data:

bundle exec rake db:seed

Run the server

bundle exec rails server

Visit the user interface in a browser

http://localhost:3000/

Sign Up in the browser to create a user account

Select the languages to translate from and to

Click Update

You will now be brought to the first flash card.

However, the vocabulary offered will be limited.

To expand the vocabulary, make yourself an administrative user through the 
rails console

bundle exec rails console
> u = User.first
> u.admin = true
> u.save
> exit

Visit the Word List Management page:

http://localhost:3000/admin/words

Click choose file to select a word list to import. 
A starter list can be found at 

sample_word_list.csv

Click Import

The format of the csv file is with a header, followed by lines with word-pairs.
The first column is the spelling in the language.
The second column is the meaning, which by convention is in English, but is not displayed to the user.
The third column indicates the language of the word in the first column.

SPELLING,MEANING,LANGUAGE

aguda,acute,Spanish

acute,acute,English

Note that for a word to appear in a flash card, a pair of rows like those above must be in the data file. If only the first row (with language==Spanish) were in the file, the program would not know how to translate it into English (since the meaning column is for internal use as a medium for translating between arbitarary pairs of languages)

The word lists do not need to be sorted in any way, so it is possible to prepare a list of Spanish to English pairs, and then the English to English pairs afterward e.g.:

SPELLING,MEANING,LANGUAGE

aguda,acute,Spanish

eje,axis,Spanish

belleza,beauty,Spanish

acute,acute,English

axis,axis,English

beauty,beauty,English

-----------------------------------------------------

The flash card page uses an ember.js to handle the client side, and communicates with a Ruby on Rails API via JSON. The client gets a new card (or "play") from the server, and then posts the user's choice back to the server, where it is recorded in the user's history.

An algorithm determines what the next card should be. For an initial grace period, new words are chosen at random from the database. After the grace period, a mix of new words and words from the user's history are presented. The application calculates the user's success rate over the user's history. If the success rate is above a certain threshold, only words chosen at random are presented. If the user's success rate falls below the threshold, the algorithm is biased toward presenting words that the user has already seen. Added weight is given to words that the user has answered incorrectly.

A useful future enhancement would be to tweak the algorithm so that the app gives greater weight to the user’s most recent history with a word. In this case, the app would notice if a user had recently been translating the word correctly, and would "forget" the user's initial errors when first exposed to the word. 

In addition to the flash card page itself, there are registration and login pages, and an account update page that allows the user to select the languages. Even though ember.js is downloaded in all cases, these pages have no ember “outlet” in them and work as traditional rails. For the Rails app, the flashcard page downloads an empty div that triggers the ember action.

The word table lists words in each language, with a pointer to a meaning table that identifies the meaning of the word. The contents of the meaning table are not presented to the user. It would be possible to distinguish different meanings of words with the same spelling. For instance, “lead” is a verb and also a chemical element. The first translates into French as "conduire" and the second as "plomb." Words could be loaded for each, pointing to meanings such as "lead:verb" and "lead:chemistry." I have used English words as meanings in my sample word list for convenience, but any unique string would do.


Words are chosen at random using the “Random()’ order that is valid in SQLite and PostgreSQL, in a query like this:

Word.where(language_id: user.from_language_id).order('Random()').first

That produces SQL like:

Word Load (0.4ms)  SELECT  "words".* FROM "words"  WHERE "words"."language_id" = 1  ORDER BY Random() LIMIT 1


Distractor words also picked at random:
Word.where.not(meaning_id: meaning_id).where(language_id: current_user.to_language_id).order('Random()').limit(2)

Which produces sql like

Word Load (1.4ms)  SELECT  "words".* FROM "words"  WHERE ("words"."meaning_id" != 1) AND "words"."language_id" = 1  ORDER BY Random() LIMIT 2

-----------------------------------------------------

To run the software test suite, simply type:

rspec



Please feel free to use a different markup language if you do not plan to run
<tt>rake doc:app</tt>.
